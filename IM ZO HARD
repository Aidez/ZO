if game.PlaceId ~= 6678877691 then
    return
end

repeat wait() until game.Players ~= nil
repeat wait() until game.Players.LocalPlayer ~= nil

local Tool = nil
local Remote = nil
local Mouse = game.Players.LocalPlayer:GetMouse()
local LoopKill = {}
local meta = getrawmetatable(game)
local namecall
local index
    
local Toggles = {
    KillAura = false;
    AutoParry = true;
    HitBoxes = false;
    AutoRetaliate = false;
    RemoteHits = false;
}
local Variables = {
    KillAuraDistance = 60;
    AutoRetaliateDistance = 10;
    Delay = false;
}

namecall = hookfunction(meta.__namecall, function(...)
    local Args = {...}
    if not checkcaller() and Args[2] == "Parry" then
        Args[2] = "Suck"
        Args[4] = "Balls"
        return namecall(unpack(Args))
    end
    return namecall(...)
end)
--[[
index = hookmetamethod(game, "__index", function(self, k)
    if tostring(self) == "Head" and tostring(k) == "Size" and not checkcaller() then
        return Vector3.new(2,1,1)
    end
    return index(self,k)
end)
--]]

repeat wait() until game.Players.LocalPlayer.Character ~= nil
repeat wait() until game.Players.LocalPlayer.Character:FindFirstChildOfClass("Tool") or game.Players.LocalPlayer.Backpack:FindFirstChildOfClass("Tool")


if game.Players.LocalPlayer.Character:FindFirstChildOfClass("Tool") then
    Tool = game.Players.LocalPlayer.Character:FindFirstChildOfClass("Tool")
elseif game.Players.LocalPlayer.Backpack:FindFirstChildOfClass("Tool") then
    Tool = game.Players.LocalPlayer.Backpack:FindFirstChildOfClass("Tool")
end

repeat 
    local Connections = getconnections(Tool.Activated)
    wait(0.1)
until #Connections ~= 0

local Connections = getconnections(Tool.Activated)
for i,v in pairs(Connections) do
    local UpValues = debug.getupvalues(Connections[i].Function)
    for x,y in pairs(UpValues) do
        if type(y) == "userdata" and not string.find(tostring(y), "%u") then
            Remote = y
        end
        --[[
        if type(y) == "table" then
            for h,j in pairs(y) do
                if type(j) == "userdata" and not string.find(tostring(j), "%u") then
                    Remote = j
                end
            end
        end
        --]]
    end
end

local function getargs(inputstring)
    inputstring = string.lower(inputstring)
    inputstring = string.gsub(inputstring, "'", "")
    inputstring = string.gsub(inputstring, ":", "")
    inputstring = string.gsub(inputstring, "/e ", "")
    inputstring = string.gsub(inputstring, "/w ", "")
    local args = string.split(inputstring, " ")
    return args
end

local function getplayer(name)
    if type(name) ~= "string" or name == nil then
        return nil
    end
    name = string.lower(name)
    local player = nil
                    
    local names = game.Players:GetChildren()                      
    for i,v in pairs(names) do
        local strlower = string.lower(v.Name)
        local sub = string.sub(strlower,1,#name)                                     
        if name == sub and v ~= game.Players.LocalPlayer then 
            player = v
        end
    end
    if player then 
        return player
    else
        return nil
    end
end

local function IsInTable(table, tofind)
    local found = false
    for i,v in pairs(table) do
        if v == tofind or i == tofind then
            found = true
            break
        end
    end
    return found
end

local function GetClosestPlayer()
    local LowestDistance = math.huge
    local ClosestCharacter = nil
    local Characters = {}
    for i,v in pairs(game:GetService("Players"):GetPlayers()) do
        if v.Character ~= nil and v ~= game.Players.LocalPlayer then
            table.insert(Characters, v.Character)
        end
    end
    for i,v in pairs(Characters) do
        if v ~= nil then
            if v:FindFirstChild("HumanoidRootPart") then
                local InitialDis = (v.HumanoidRootPart.Position - game.Workspace.CurrentCamera.CFrame.p).magnitude
                local Ray = Ray.new(game.Workspace.CurrentCamera.CFrame.p, (Mouse.Hit.p - game.Workspace.CurrentCamera.CFrame.p).unit * InitialDis)
                local Part,Position = game.Workspace:FindPartOnRay(Ray, game.Workspace)
                local FinalDifference = math.floor((Position - v.HumanoidRootPart.Position).magnitude)
                if FinalDifference < LowestDistance then
                    ClosestCharacter = v
                    LowestDistance = FinalDifference
                end
            end
        end
    end
    local ClosestPlayer = game.Players:GetPlayerFromCharacter(ClosestCharacter)
    if ClosestPlayer ~= nil then
        return ClosestPlayer
    end
end

local function SetParry()
    if Toggles.AutoParry then
        Remote:FireServer("Parry", game.Players.LocalPlayer.Character:FindFirstChildOfClass("Tool"), false)
        Remote:FireServer("Parry", game.Players.LocalPlayer.Character:FindFirstChildOfClass("Tool"), true)
    end
end

local function WhenPlayed(track)
    if track.Name == "Equip" and Toggles.AutoParry then
        Remote:FireServer("Parry", game.Players.LocalPlayer.Character:FindFirstChildOfClass("Tool"), false)
        Remote:FireServer("Parry", game.Players.LocalPlayer.Character:FindFirstChildOfClass("Tool"), true)
    elseif track.Name == "Dequip" then
        repeat wait() until game.Players.LocalPlayer.Backpack:FindFirstChildOfClass("Tool")
        Remote:FireServer("Parry", game.Players.LocalPlayer.Backpack:FindFirstChildOfClass("Tool"), false)
    end
end

local function OnDeath()
    Remote:FireServer("Parry", game.Players.LocalPlayer.Character:FindFirstChildOfClass("Tool"), false)
end

local function ToggleHitboxes(toggle)
    if toggle == nil then
        Toggles.HitBoxes = not Toggles.HitBoxes
    else
        Toggles.HitBoxes = toggle
    end
    if Toggles.HitBoxes then
        for i,v in pairs(game.Players:GetPlayers()) do
            if v.Character ~= nil and v ~= game.Players.LocalPlayer then
                if v.Character:FindFirstChild("Head") then
                    v.Character.Head.Size = Vector3.new(8,5,8)
                    v.Character.Head.CanCollide = false
                    if v.Character.Head:FindFirstChildOfClass("SpecialMesh") then
                        v.Character.Head:FindFirstChildOfClass("SpecialMesh").MeshType = Enum.MeshType.Brick
                        v.Character.Head:FindFirstChildOfClass("SpecialMesh").Scale = Vector3.new(1,1,1)
                    end
                end
            end
        end
    else
        wait()
        for i,v in pairs(game.Players:GetPlayers()) do
            if v.Character ~= nil and v ~= game.Players.LocalPlayer then
                if v.Character:FindFirstChild("Head") then
                    v.Character.Head.Size = Vector3.new(2, 1, 1)
                    v.Character.Head.CanCollide = true
                    v.Character.Head.Transparency = 0
                    if v.Character.Head:FindFirstChildOfClass("SpecialMesh") then
                        v.Character.Head:FindFirstChildOfClass("SpecialMesh").MeshType = Enum.MeshType.FileMesh
                    end
                end
            end
        end
    end
    local currenttext = ""
    if Toggles.HitBoxes == true then
        currenttext = "Hitboxes are now ON!"
    else
        currenttext = "Hitboxes are now OFF!"
    end
    game.StarterGui:SetCore("SendNotification", {
        Title = "notification";
        Text = currenttext;
        Icon = "rbxassetid://2541869220";
        Duration = 3;
    })
end

local function ToggleKillAura(toggle)
    if toggle == nil then
        Toggles.KillAura = not Toggles.KillAura
    else
        Toggles.KillAura = toggle
    end
    local currenttext = ""
    if Toggles.KillAura == true then
        currenttext = "KillAura is now ON!"
    else
        currenttext = "KillAura is now OFF!"
    end
    game.StarterGui:SetCore("SendNotification", {
        Title = "notification";
        Text = currenttext;
        Icon = "rbxassetid://2541869220";
        Duration = 3;
    })
end

local function ToggleAutoRetaliate(toggle)
    if toggle == nil then
        Toggles.AutoRetaliate = not Toggles.AutoRetaliate
    else
        Toggles.AutoRetaliate = toggle
    end
    local currenttext = ""
    if Toggles.AutoRetaliate == true then
        currenttext = "AutoRetaliate is now ON!"
    else
        currenttext = "AutoRetaliate is now OFF!"
    end
    game.StarterGui:SetCore("SendNotification", {
        Title = "notification";
        Text = currenttext;
        Icon = "rbxassetid://2541869220";
        Duration = 3;
    })
end

local function ToggleRemoteHits(toggle)
    if toggle == nil then
        Toggles.RemoteHits = not Toggles.RemoteHits
    else
        Toggles.RemoteHits = toggle
    end
    local currenttext = ""
    if Toggles.RemoteHits == true then
        currenttext = "RemoteHits is now ON!"
    else
        currenttext = "RemoteHits is now OFF!"
    end
    game.StarterGui:SetCore("SendNotification", {
        Title = "notification";
        Text = currenttext;
        Icon = "rbxassetid://2541869220";
        Duration = 3;
    })
end

local function ToggleAutoParry(toggle)
    if toggle == nil then
        Toggles.AutoParry = not Toggles.AutoParry
    else
        Toggles.AutoParry = toggle
    end
    Remote:FireServer("Parry", game.Players.LocalPlayer.Character:FindFirstChildOfClass("Tool"), Toggles.AutoParry)
    local currenttext = ""
    if Toggles.AutoParry == true then
        Remote:FireServer("Parry", game.Players.LocalPlayer.Character:FindFirstChildOfClass("Tool"), true)
        currenttext = "AutoParry is now ON!"
    else
        Remote:FireServer("Parry", game.Players.LocalPlayer.Character:FindFirstChildOfClass("Tool"), false)
        currenttext = "AutoParry is now OFF!"
    end
    game.StarterGui:SetCore("SendNotification", {
        Title = "notification";
        Text = currenttext;
        Icon = "rbxassetid://2541869220";
        Duration = 3;
    })
end


local Holder = Instance.new("ScreenGui")
local CommandBar = Instance.new("TextBox",Holder)
local CommandList = Instance.new("ScrollingFrame",Holder)

CommandBar.Name = "CommandBar"
CommandBar.Parent = Holder
CommandBar.BackgroundTransparency = 0
CommandBar.BorderSizePixel = 0
CommandBar.Position = UDim2.new(1, -240, 0.6, 0)
CommandBar.Size = UDim2.new(0, 240, 0, 25)
CommandBar.Font = Enum.Font.SourceSans
CommandBar.TextSize = 18
CommandBar.TextXAlignment = Enum.TextXAlignment.Left
CommandBar.TextColor3 = Color3.new(1, 1, 1)
CommandBar.BackgroundColor3 = Color3.new(54/255,57/255,63/255)
CommandBar.Text = ""
CommandBar.ZIndex = 10
CommandBar.PlaceholderText = "Press ' or click here to type commands"

CommandList.Name = "CMDs"
CommandList.Parent = Holder
CommandList.BackgroundTransparency = 0
CommandList.BorderSizePixel = 0
CommandList.Position = UDim2.new(1, -240, 0.6, 25)
CommandList.Size = UDim2.new(0, 240, 0, 175)
CommandList.ScrollBarImageColor3 = Color3.fromRGB(78,78,79)
CommandList.BackgroundColor3 = Color3.new(54/255,57/255,63/255)
CommandList.BottomImage = "rbxasset://textures/ui/Scroll/scroll-middle.png"
CommandList.CanvasSize = UDim2.new(0, 0, 0, 0)
CommandList.MidImage = "rbxasset://textures/ui/Scroll/scroll-middle.png"
CommandList.ScrollBarThickness = 8
CommandList.TopImage = "rbxasset://textures/ui/Scroll/scroll-middle.png"
CommandList.VerticalScrollBarInset = 'Always'
CommandList.ZIndex = 10
CommandList.Visible = false
--CommandList.ClipsDescendants = false

local Button = Instance.new("TextButton")
Button.Name = "Button"
Button.BackgroundTransparency = 1
Button.BorderSizePixel = 0
Button.Size = UDim2.new(0, 190, 0, 20)
Button.Visible = false
Button.Font = Enum.Font.SourceSans
Button.TextSize = 18
Button.Text = "Button"
Button.TextColor3 = Color3.new(1, 1, 1)
Button.TextXAlignment = Enum.TextXAlignment.Left
Button.ZIndex = 10

local ListLayout = Instance.new("UIListLayout", CommandList)

--syn.protect_gui(Holder)
Holder.Parent = game.CoreGui

local Commands = {
    killauradis = {
        description = "NUM (sets kill aura distance to NUM)",
        fire = function(number)
            if tonumber(number) ~= nil then
                Variables.KillAuraDistance = tonumber(number)
            end
        end,
    };
    kad = {
        description = "NUM (sets kill aura distance to NUM)",
        fire = function(number)
            if tonumber(number) ~= nil then
                Variables.KillAuraDistance = tonumber(number)
            end
        end,
    };
    autoparry = {
        description = "(Toggles autoparry)",
        isatoggle = true,
        fire = function()
            ToggleAutoParry()
        end,
    };
    autoparry_on = {
        description = "(Toggles autoparry ON)",
        isatoggle = true,
        fire = function()
            ToggleAutoParry(true)
        end,
    };
    autoparry_off = {
        description = "(Toggles autoparry OFF)",
        isatoggle = true,
        fire = function()
            ToggleAutoParry(false)
        end,
    };
    killaura = {
        description = "(Toggles killaura)",
        isatoggle = true,
        fire = function()
            ToggleKillAura()
        end,
    };
    killaura_on = {
        description = "(Toggles killaura ON)",
        isatoggle = true,
        fire = function()
            ToggleKillAura(true)
        end,
    };
    killaura_off = {
        description = "(Toggles killaura OFF)",
        isatoggle = true,
        fire = function()
            ToggleKillAura(false)
        end,
    };


    hitboxes = {
        description = "(Toggles hitboxes)",
        isatoggle = true,
        fire = function()
            ToggleHitboxes()
        end,
    };
    hitboxes_on = {
        description = "(Toggles hitboxes ON)",
        isatoggle = true,
        fire = function()
            ToggleHitboxes(true)
        end,
    };
    hitboxes_off = {
        description = "(Toggles hitboxes OFF)",
        isatoggle = true,
        fire = function()
            ToggleHitboxes(false)
        end,
    };
    loopkill = {
        description = "PLAYER (auto kills PLAYER when in range)",
        fire = function(plrname)
            if plrname == "others" then
                for i,v in pairs(game.Players:GetPlayers()) do
                    if not IsInTable(LoopKill, v.Name) and v ~= game.Players.LocalPlayer then
                        table.insert(LoopKill, v.Name)
                    end
                end
                return
            end
            local Target = getplayer(plrname)
            if Target == nil then
                return
            end
            if not IsInTable(LoopKill, Target.Name) then
                table.insert(LoopKill, Target.Name)
            end
        end,
    };
    unloopkill = {
        description = "PLAYER (unloops PLAYER)",
        fire = function(plrname)
            if plrname == "others" or plrname == "all" then
                for i = 1,#LoopKill do
                    table.remove(LoopKill, 1)
                end
                return
            end
            for i,v in pairs(LoopKill) do
                if string.lower(string.sub(v, 0,#plrname)) == string.lower(plrname) then
                    table.remove(LoopKill, i)
                end
            end
        end,
    };

    autoretaliate = {
        description = "(Toggles auto retaliate)",
        isatoggle = true,
        fire = function()
            ToggleAutoRetaliate()
        end,
    };
    autoretaliate_on = {
        description = "(Toggles auto retaliate ON)",
        isatoggle = true,
        fire = function()
            ToggleAutoRetaliate(true)
        end,
    };
    autoretaliate_off = {
        description = "(Toggles auto retaliate OFF)",
        isatoggle = true,
        fire = function()
            ToggleAutoRetaliate(false)
        end,
    };
    autoretaldis = {
        description = "NUM (sets auto retaliate distance to NUM)",
        fire = function(number)
            if tonumber(number) ~= nil then
                Variables.AutoRetaliateDistance = tonumber(number)
            end
        end,
    };
    ard = {
        description = "NUM (sets auto retaliate distance to NUM)",
        fire = function(number)
            if tonumber(number) ~= nil then
                Variables.AutoRetaliateDistance = tonumber(number)
            end
        end,
    };

    remotehits = {
        description = "(Toggles remote hits)",
        isatoggle = true,
        fire = function()
            ToggleRemoteHits()
        end,
    };
    remotehits_on = {
        description = "(Toggles remote hits ON)",
        isatoggle = true,
        fire = function()
            ToggleRemoteHits(true)
        end,
    };
    remotehits_off = {
        description = "(Toggles remote hits OFF)",
        isatoggle = true,
        fire = function()
            ToggleRemoteHits(false)
        end,
    };
}

CommandBar.Focused:Connect(function()
    CommandList.Visible = true
    for i,v in pairs(CommandList:GetChildren()) do
        if v:IsA("TextButton") and not string.find(v.Name, "_on") and not string.find(v.Name, "_off") then
            v.Visible = true
        end
        wait()
        if string.find(v.Name, "_on") or string.find(v.Name, "_off") then
            v.Visible = false
        end
    end
end)

CommandBar.FocusLost:Connect(function(enterpressed, input)
    if enterpressed then
        local args = getargs(CommandBar.Text)
        if args[2] == "on" and Commands[args[1].."_"..args[2]] ~= nil or args[2] == "off" and Commands[args[1].."_"..args[2]] ~= nil then
            Commands[args[1].."_"..args[2]].fire()
        elseif Commands[args[1]] ~= nil then
            local CommandName = args[1]
            table.remove(args, 1)
            Commands[CommandName].fire(unpack(args))
        end
    end
    wait()
    CommandList.Visible = false
    for i,v in pairs(CommandList:GetChildren()) do
        if v:IsA("TextButton") then
            v.Visible = false
        end
    end
    CommandBar.Text = ""
end)
CommandBar:GetPropertyChangedSignal("Text"):Connect(function()
    if CommandBar.Text == "'" then
        CommandBar.Text = ""
    end
    for i,v in pairs(CommandList:GetChildren()) do
        if v:IsA("TextButton") then
            if string.sub(string.lower(v.Text), 0, #CommandBar.Text) ~= string.lower(CommandBar.Text) then
                v.Visible = false
            else
                v.Visible = true
            end
        end
    end
end)


for i,v in pairs(Commands) do
    local new = Button:Clone()
    new.Parent = CommandList
    new.Visible = false
    new.Name = i
    new.Text = string.gsub(i, "_", " ").." "..v.description
    if v.isatoggle == true then
        new.MouseButton1Down:Connect(function()
            v.fire()
        end)
    end
end



Mouse.KeyDown:Connect(function(key)
    if key == "k" then
        ToggleAutoParry()
    end
    if key == "l" then
        ToggleKillAura()
    end
    if key == "j" then
        ToggleHitboxes()
    end
    if key == "h" then
        ToggleRemoteHits()
    end
    if key == "g" then
        ToggleAutoRetaliate()
    end
    if key == "'" then
        CommandBar:CaptureFocus()
    end
end)

Mouse.Button1Down:Connect(function()
    if Toggles.RemoteHits then
        local Target = GetClosestPlayer()
        if Target.Character ~= nil then
            if Target.Character:FindFirstChild("Head") then
                if game.Players.LocalPlayer:DistanceFromCharacter(Target.Character.Head.Position) <= 60 then
                    Remote:FireServer("Touchd",Tool, Target.Character.Head, Target.Character.Head.CFrame)
                end
            end
        end
    end
end)


game:GetService('RunService').Stepped:connect(function()
    for i,v in pairs(game.Players:GetPlayers()) do
        if v.Character ~= nil then
            local Parrying = false
            if v.Character:FindFirstChildOfClass("Tool") then
                if v.Character:FindFirstChildOfClass("Tool"):FindFirstChild("Parry") then
                    if v.Character:FindFirstChildOfClass("Tool").Parry.Value == true then
                        Parrying = true
                    end
                end
            end
            if v.Character:FindFirstChild("Head") then
                if game.Players.LocalPlayer:DistanceFromCharacter(v.Character.Head.Position) <= Variables.KillAuraDistance and not Parrying and Toggles.KillAura then
                    Remote:FireServer("Touchd",Tool, v.Character.Head, v.Character.Head.CFrame)
                elseif game.Players.LocalPlayer:DistanceFromCharacter(v.Character.Head.Position) <= 60 and not Parrying and IsInTable(LoopKill, v.Name) then
                    Remote:FireServer("Touchd",Tool, v.Character.Head, v.Character.Head.CFrame)
                end
            end
        end
    end
end)

game:GetService('RunService').Stepped:connect(function()
    if Toggles.HitBoxes then
        for i,v in pairs(game.Players:GetPlayers()) do
            if v.Character ~= nil and v.Name ~= game.Players.LocalPlayer.Name then
                if v.Character:FindFirstChild("Head") then
                    v.Character.Head.Size = Vector3.new(8,5,5)
                    v.Character.Head.CanCollide = false
                    v.Character.Head.Transparency = 0.6
                    if v.Character.Head:FindFirstChildOfClass("SpecialMesh") then
                        v.Character.Head:FindFirstChildOfClass("SpecialMesh").MeshType = Enum.MeshType.Brick
                        v.Character.Head:FindFirstChildOfClass("SpecialMesh").Scale = Vector3.new(1,1,1)
                    end
                end
            end
        end
    end
end)

game:GetService('RunService').Stepped:connect(function()
    if Variables.Delay == false then
        Variables.Delay = true
        if Toggles.AutoParry then
            Remote:FireServer("Parry", game.Players.LocalPlayer.Character:FindFirstChildOfClass("Tool"), false)
            Remote:FireServer("Parry", game.Players.LocalPlayer.Character:FindFirstChildOfClass("Tool"), true)
        end
        wait(0.3)
        Variables.Delay = false
    end
end)


game.Players.LocalPlayer.CharacterAdded:Connect(function(char)
    Tool = nil
    char.ChildAdded:Connect(function(child)
        if child:IsA("Tool") and child:FindFirstChild("Parry") and Tool == nil then
            Tool = child
            Tool.Parry:GetPropertyChangedSignal("Value"):Connect(SetParry)
        end
    end)
    repeat wait() until char:FindFirstChild("Humanoid")
    char.Humanoid.AnimationPlayed:Connect(WhenPlayed)
    char.Humanoid.Died:Connect(OnDeath)
end)

repeat wait() until Tool:FindFirstChild("Parry")
Tool.Parry:GetPropertyChangedSignal("Value"):Connect(SetParry)

repeat wait() until game.Players.LocalPlayer.Character ~= nil
repeat wait() until game.Players.LocalPlayer.Character:FindFirstChild("Humanoid")

game.Players.LocalPlayer.Character.Humanoid.AnimationPlayed:Connect(WhenPlayed)
game.Players.LocalPlayer.Character.Humanoid.Died:Connect(OnDeath)


for i,v in pairs(game.Players:GetPlayers()) do
    if v.Character ~= nil then
        if v.Character:FindFirstChild("Humanoid") then
            v.Character.Humanoid.AnimationPlayed:Connect(function(track)
                local HostileAnimations = {}
                table.insert(HostileAnimations, "rbxassetid://6907975812")
                if v.Character:FindFirstChildOfClass("Tool") then
                    for i,v in pairs(v.Character:FindFirstChildOfClass("Tool").SwingAnimations:GetChildren()) do
                        table.insert(HostileAnimations, v.AnimationId)
                    end
                end
                if IsInTable(HostileAnimations, track.Animation.AnimationId) and v.Character:FindFirstChild("Head") then
                    if game.Players.LocalPlayer:DistanceFromCharacter(v.Character.Head.Position) <= 15 and Toggles.AutoParry == true then
                        Remote:FireServer("Parry", game.Players.LocalPlayer.Character:FindFirstChildOfClass("Tool"), false)
                        Remote:FireServer("Parry", game.Players.LocalPlayer.Character:FindFirstChildOfClass("Tool"), true)
                    end
                    if game.Players.LocalPlayer:DistanceFromCharacter(v.Character.Head.Position) <= Variables.AutoRetaliateDistance and Toggles.AutoRetaliate == true then
                        repeat 
                            if game.Players.LocalPlayer:DistanceFromCharacter(v.Character.Head.Position) <= 60 and Toggles.AutoRetaliate == true then
                                if v.Character:FindFirstChildOfClass("Tool") then
                                    if v.Character:FindFirstChildOfClass("Tool").Parry.Value == false then
                                       Remote:FireServer("Touchd",Tool, v.Character.Head, v.Character.Head.CFrame)
                                    end
                                else
                                    Remote:FireServer("Touchd",Tool, v.Character.Head, v.Character.Head.CFrame)
                                end
                            end
                            wait()
                        until v.Character == nil or v.Character.Humanoid.Health == 0 or game.Players.LocalPlayer.Character.Humanoid.Health == 0 or Toggles.AutoRetaliate == false
                    end
                end
            end)
        end
    end
    v.CharacterAdded:Connect(function(char)
        repeat wait() until char:FindFirstChild("Humanoid")
        if char:FindFirstChild("Humanoid") then
            char.Humanoid.AnimationPlayed:Connect(function(track)
                local HostileAnimations = {}
                table.insert(HostileAnimations, "rbxassetid://6907975812")
                if char:FindFirstChildOfClass("Tool") then
                    for i,v in pairs(char:FindFirstChildOfClass("Tool").SwingAnimations:GetChildren()) do
                        table.insert(HostileAnimations, v.AnimationId)
                    end
                end
                if IsInTable(HostileAnimations, track.Animation.AnimationId) and char:FindFirstChild("Head") then
                    if game.Players.LocalPlayer:DistanceFromCharacter(char.Head.Position) <= Variables.AutoRetaliateDistance and Toggles.AutoRetaliate == true then
                        repeat 
                            if game.Players.LocalPlayer:DistanceFromCharacter(char.Head.Position) <= 60 and Toggles.AutoRetaliate == true then
                                if char:FindFirstChildOfClass("Tool") then
                                    if char:FindFirstChildOfClass("Tool").Parry.Value == false then
                                       Remote:FireServer("Touchd",Tool, char.Head, char.Head.CFrame)
                                    end
                                else
                                    Remote:FireServer("Touchd",Tool, char.Head, char.Head.CFrame)
                                end
                            end
                            wait()
                        until char == nil or char.Humanoid.Health == 0 or game.Players.LocalPlayer.Character.Humanoid.Health == 0 or Toggles.AutoRetaliate == false
                    end
                end
            end)
        end
    end)
end

game.Players.PlayerAdded:Connect(function(v)
    if v.Character ~= nil then
        if v.Character:FindFirstChild("Humanoid") then
            v.Character.Humanoid.AnimationPlayed:Connect(function(track)
                local HostileAnimations = {}
                table.insert(HostileAnimations, "rbxassetid://6907975812")
                if v.Character:FindFirstChildOfClass("Tool") then
                    for i,v in pairs(v.Character:FindFirstChildOfClass("Tool").SwingAnimations:GetChildren()) do
                        table.insert(HostileAnimations, v.AnimationId)
                    end
                end
                if IsInTable(HostileAnimations, track.Animation.AnimationId) and v.Character:FindFirstChild("Head") then
                    if game.Players.LocalPlayer:DistanceFromCharacter(v.Character.Head.Position) <= Variables.AutoRetaliateDistance and Toggles.AutoRetaliate == true then
                        repeat 
                            if game.Players.LocalPlayer:DistanceFromCharacter(v.Character.Head.Position) <= 60 and Toggles.AutoRetaliate == true then
                                if v.Character:FindFirstChildOfClass("Tool") then
                                    if v.Character:FindFirstChildOfClass("Tool").Parry.Value == false then
                                       Remote:FireServer("Touchd",Tool, v.Character.Head, v.Character.Head.CFrame)
                                    end
                                else
                                    Remote:FireServer("Touchd",Tool, v.Character.Head, v.Character.Head.CFrame)
                                end
                            end
                            wait()
                        until v.Character == nil or v.Character.Humanoid.Health == 0 or game.Players.LocalPlayer.Character.Humanoid.Health == 0 or Toggles.AutoRetaliate == false
                    end
                end
            end)
        end
    end
    v.CharacterAdded:Connect(function(char)
        repeat wait() until char:FindFirstChild("Humanoid")
        if char:FindFirstChild("Humanoid") then
            char.Humanoid.AnimationPlayed:Connect(function(track)
                local HostileAnimations = {}
                table.insert(HostileAnimations, "rbxassetid://6907975812")
                if char:FindFirstChildOfClass("Tool") then
                    for i,v in pairs(char:FindFirstChildOfClass("Tool").SwingAnimations:GetChildren()) do
                        table.insert(HostileAnimations, v.AnimationId)
                    end
                end
                if IsInTable(HostileAnimations, track.Animation.AnimationId) and char:FindFirstChild("Head") then
                    if game.Players.LocalPlayer:DistanceFromCharacter(char.Head.Position) <= Variables.AutoRetaliateDistance and Toggles.AutoRetaliate == true then
                        repeat 
                            if game.Players.LocalPlayer:DistanceFromCharacter(char.Head.Position) <= 60 and Toggles.AutoRetaliate == true then
                                if char:FindFirstChildOfClass("Tool") then
                                    if char:FindFirstChildOfClass("Tool").Parry.Value == false then
                                       Remote:FireServer("Touchd",Tool, char.Head, char.Head.CFrame)
                                    end
                                else
                                    Remote:FireServer("Touchd",Tool, char.Head, char.Head.CFrame)
                                end
                            end
                            wait()
                        until char == nil or char.Humanoid.Health == 0 or game.Players.LocalPlayer.Character.Humanoid.Health == 0 or Toggles.AutoRetaliate == false
                    end
                end
            end)
        end
    end)
end)

for i,v in pairs(Commands) do
    --print(string.gsub(i, "_", " ").." "..v.description)
end
--print("-------------")
--print([[
--G Key - Toggle Auto Retaliate
--H Key - Toggle Remote Hits
--J Key - Toggle Expanded Hitboxes
--K Key - Toggle Auto Parry
--L Key - Toggle Kill Aura
--]])

game.StarterGui:SetCore("SendNotification", {
    Title = '"IM ZO HARD"';
    Text = "SUCCESSFULLY INJECTED, F9 FOR CMDS                    (MADE BY AIDEZ)";
    Icon = "rbxassetid://2541869220";
    Duration = 7;
})
